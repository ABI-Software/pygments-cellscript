def model first_order_model as
    def unit millisec as
        unit second {pref: milli};
    enddef;
    def unit per_millisec as
        unit second {pref: milli, expo: -1};
     enddef;
    def unit millivolt as
        unit volt {pref: milli};
    enddef;
    def unit microA_per_cm2 as
        unit ampere {pref: micro};
        unit metre {pref: centi, expo: -2};
    enddef;
    def unit milliS_per_cm2 as
        unit siemens {pref: milli};
        unit metre {pref: centi, expo: -2};
    enddef;
// Comment most definitely
    def comp ion_channel as // Another comment
        var V: millivolt {init: 0};
        var t: millisec {init: 0};
        var y: dimensionless {init: 0};
        var E_y: millivolt {init: -85};
        var i_y: microA_per_cm2;
        var g_y: milliS_per_cm2 {init: 36};
        var gamma: dimensionless {init: 4};
        var alpha_y: per_millisec {init: 1};
        var beta_y: per_millisec {init: 2};
        ode(y, t) = alpha_y*(1{dimensionless}-y)-beta_y*y;
        i_y = g_y*pow(y, gamma)*(V-E_y);
     enddef;
enddef;

def model Noble_1962 as
   def import using "Noble62_Na_channel.xml" for
      comp Na_channel using comp sodium_channel;
   enddef;
   def import using "Noble62_K_channel.xml" for
      comp K_channel using comp potassium_channel;
   enddef;
   def import using "Noble62_L_channel.xml" for
      comp L_channel using comp leakage_channel;
   enddef;
   def import using "Noble62_units.xml" for
      unit mV using unit mV;
      unit ms using unit ms;
      unit nanoF using unit nanoF;
      unit nanoA using unit nanoA;
   enddef;
   def import using "Noble62_parameters.xml" for
      comp parameters using comp parameters;
   enddef;
   def map between parameters and membrane for
      vars Ki and Ki;
      vars Ko and Ko;
      vars Nai and Nai;
      vars Nao and Nao;
   enddef;
   def comp environment as
      var t: ms {init: 0, pub: out};
   enddef;
   def group as encapsulation for
      comp membrane incl
         comp Na_channel;
         comp K_channel;
         comp L_channel;
      endcomp;
   enddef;
   def comp membrane as
      var V: mV {init: -85, pub: out, priv: out};
      var t: ms {pub: in, priv: out};
      var Cm: nanoF {init: 12000};
      var Ki: mM {pub: in, priv: out};
      var Ko: mM {pub: in, priv: out};
      var Nai: mM {pub: in, priv: out};
      var Nao: mM {pub: in, priv: out};
      var i_Na: nanoA {pub: out, priv: in};
      var i_K: nanoA {pub: out, priv: in};
      var i_L: nanoA {pub: out, priv: in};
      ode(V, t) = -(i_Na+i_K+i_L)/Cm;
   enddef;
   def map between environment and membrane for
      vars t and t;
   enddef;
   def map between membrane and Na_channel for
      vars V and V;
      vars t and t;
      vars Nai and Nai;
      vars Nao and Nao;
      vars i_Na and i_Na;
   enddef;
   def map between membrane and K_channel for
      vars V and V;
      vars t and t;
      vars Ki and Ki;
      vars Ko and Ko;
      vars i_K and i_K;
   enddef;
   def map between membrane and L_channel for
      vars V and V;
      vars i_L and i_L;
   enddef;
enddef;

   def model potassium_ion_channel as
      def unit millisec as
         unit second {pref: milli};
      enddef;
      def unit per_millisec as
         unit second {pref: milli, expo: -1};
      enddef;
      def unit millivolt as
         unit volt {pref: milli};
      enddef;
      def unit per_millivolt as
         unit millivolt {expo: -1};
      enddef;
      def unit per_millivolt_millisec as
         unit per_millivolt;
         unit per_millisec;
      enddef;
      def unit microA_per_cm2 as
         unit ampere {pref: micro};
         unit metre {pref: centi, expo: -2};
      enddef;
      def unit milliS_per_cm2 as
         unit siemens {pref: milli};
         unit metre {pref: centi, expo: -2};
      enddef;
      def unit mM as
         unit mole {pref: milli};
      enddef;
      def comp environment as
         var V: millivolt { pub: out};
         var t: millisec {pub: out};
         V = sel
         case (t > 5 {millisec}) and (t < 15 {millisec}):
            -85.0 {millivolt};
         otherwise:
            0.0 {millivolt};
         endsel;
      enddef;
      def group as encapsulation for
         comp potassium_channel incl
            comp potassium_channel_n_gate;
         endcomp;
      enddef;
      def comp potassium_channel as
         var V: millivolt {pub: in , priv: out};
         var t: millisec {pub: in, priv: out};
         var n: dimensionless {priv: in};
         var i_K: microA_per_cm2 {pub: out};
         var g_K: milliS_per_cm2 {init: 36};
         var Ko: mM {init: 3};
         var Ki: mM {init: 90};
         var RTF: millivolt {init: 25};
         var E_K: millivolt;
         var K_conductance: milliS_per_cm2 {pub: out};
         E_K=RTF*ln(Ko/Ki);
         K_conductance = g_K*pow(n, 4{dimensionless});
         i_K = K_conductance(V-E_K);
      enddef;
      def comp potassium_channel_n_gate as
         var V: millivolt {pub: in};
         var t: millisec {pub: in};
         var n: dimensionless {init: 0.325, pub: out};
         var alpha_n: per_millisec;
         var beta_n: per_millisec;
         alpha_n = 0.01{per_millivolt_millisec}*(V+10{millivolt})
            /(exp((V+10{millivolt})/10{millivolt})-1{dimensionless});
         beta_n = 0.125{per_millisec}*exp(V/80{millivolt});
         beta_n = -0.125{per_millisec}*exp(V/80{millivolt});
         ode(n, t) = alpha_n*(1{dimensionless}-n)-beta_n*n;
      enddef;
      def map between environment and potassium_channel for
         vars V and V;
         vars t and t;
      enddef;
      def map between potassium_channel and
        potassium_channel_n_gate for
         vars V and V;
         vars t and t;
         vars n and n;
      enddef;
   enddef;

